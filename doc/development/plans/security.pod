=head1 NAME

Implementation plan for Dicole security framework

=head1 TASK INFORMATION

=over 4

=item B<Date>

$Date: 2009-01-07 14:42:32 $

=item B<Severity>

Critical

=item B<Priority>

P1

=item B<Risk factor>

1, 2, 3...

=item B<Estimate>

The estimated ammount of work is... 

=item B<Status>

New & Assigned.

=back

=head1 ABSTRACT

This document explains how the dicole security system should be implemented.

=head1 DETAILS

The security system is a module used by the handlers to check if the user
has right to do some stuff in Dicole. When installing an OI-module, the module 
tells the sec-system what rights can be used with the module's handlers. These
are registered in the security database, and after installation these new rights
can be given to users and user groups using the security tool.

The provided basic security levels can be also grouped in security level groups.
However, groups cannot be part of other groups (only two-leveled network). Each
basic security element can be part of multiple groups.

To make things simple, the users/groups/everybody can be given only these "grouped"
rights -- when installing the modules, a group containing only one right is also
created for each provided right. When we are doing it like this, we don't have to
search the available rights from two different database tables. This also makes
it possible for admins to delete some of these basic rights from the system so
that the right can't be given to anybody. Actually the basic available rights remain
unchanged but only the group containing this particular basic right is removed.

=head2 DATABASE TABLES

=over 4

=item B<Provided security levels>

This table lists all the security levels that are provided by the installed
OI-packages. For each authorization element (at least) the following fields
are defined: 

=over 8

=item * id,

=item * name,

=item * description,

=item * OI_module_name,

=item * unique_id (unique in module), 

=item * allowed_target_types (string containing any combination of letters U, G and W), 

=item * target_scope ("this security authorization can be given to a user/group/everybody"), 

=item * needed_sec_level_string (of the form [OI_module_name]::[unique_id]).

=back

=item B<Security level groups>

This table contains the basic information of each defined security level group.
At least the following information is needed: 

=over 8

=item * id,

=item * name,

=item * description

=back

=item B<Security level group items>

This table tells which of the basic security levels are connected to each security
level group. At least the following information is needed: 

=over 8

=item * id,

=item * group_id,

=item * sec_level_id,

=back

=item B<Security table>

This table lists all the user/group/world security settings. At least the
following information must be stored for each row:

=over 8

=item * id,

=item * sec_group_id,

=item * target_type (U / G / W / empty -- empty if the right doesn't have a target ),

=item * target_id (user_id / group_id / null ),

=item * authorized_entity_type (U / G / W ),

=item * authorized_entity_id (user_id / group_id / null ),

=item * is_allowed (0/1),

=back

=item B<Cache table>

Cacheing could be implemented using a db table. The table should contain one row
for each user, and the row should list all the rights for the user. If a right isn't 
found in the cache, it is computed using the tables described above and saved to the
cache table. When modifying user rights the cache table is emptied.

=over 8

=item * user_id,

=item * rights,

=back

The rights column is a text-column which contains the user rights as a CSV-string. Each
element in the CSV-string contains a string like
"[OI_module_name]::[unique_id]::[target_type]::[target_id(uid/gid/0)]::[is_allowed(1/0/empty)]". Then we can
fetch the CSV-string of the current user from the database, map the CSV-string to an
array of security level strings, and then check if the array contains for example the
string "dicole_security::read_right::G::3::1" (the user has reading right to the security
tool -- but only for the data of group 3). If the is_allowed-attribute in this string is empty,
the user hasn't been allowed nor denied access to this particular feature.

=back

Note that the allowed_target_types -attribute in Provided security levels might be different
in several grouped security levels. For example if we have a provided sec level A, which has
"UGW" as allowed_target_types, and sec level B which has "UG", what should we set as the 
virtual allowed_target_types for the group? Or should we ditch the allowed_target_types, and
presume that all the security settings should always be available to users, groups and world?
What do we lose by making this simplification?

=head2 IMPLEMENTATION OF SECURITY LEVEL MANAGER

The security manager should have the following functionality:

=over 4

=item B<Browse/edit/add available security levels (groups)>

Shows a list of the security level _groups_ (remember that for each distinct basic 
security level a group containing a single sec level has been created). Can be implemented
using Generictool. Shows a list containing sec level name, scope (the common scope of
all the basic elements in the group), target_scope (the common scope of the basic 
elements in the group) and the security level(s) needed to give this sec authorization to
others (all the security levels needed to give all the distinct basic sec levels in this
group).

By clicking the security level name the user can view detaile of the security level group.
The details contain all the information on the group (for example all the basic sec levels
in this group). If the user has the right to edit the groups, a button ('Modify')  is 
displayed in the detail page. By clicking this the user is taken to a page where he/she
can modify the details. The user can select which basic security level elements belong
to this group. Scope, target_scope and needed sec level are computed automatically,
and the user cannot affect those.

The detail and modifying pages also have Remove buttons if the user has right to remove
sec level groups. Clicking this button removes this right from the system and removes all
references to this right from other databases (removes rights from all users that have this
right set). Note that the basic sec levels are unaffected when deleting the groups -- the
user can create a new group containing the same basic sec elements after removal.

The list of sec level groups has also add button if the user has right to add new sec level 
groups. 

PROBLEM: how can we make sure that the user sets only similar (same scope and target_scope) basic
sec elements to a single group. Should we make a wizard-like system where first the scope and
target_scope is selected, and then a list containing only similar basic righs is displayed?

=item B<Modify user rights>

The page shows a list of users. Clicking the user name takes to a page displaying user
details and rights. The list of rights contains the sec group name and the scope that it's
defined for (userID / groupID -- the user can have many 'Right to edit forums' rights with
different groupIDs). Each security level has a checkbox next to it. Checking those and clicking
Remove removes the selected security settings. 

Adding new security settings is wizard-like functionality. The available options in the
further pages depends on the earlier selections. Clicking add in the detail page takes to a 
page displaying all the sec groups that have target_scope == user. Only those rights are
shown that the user has rights to give others. Clicking the name of a security group takes 
to the second page of the wizard that displays the options that can be defined for this 
security group (the userID (or name) / groupID (or name) in a dropdown).

The options could be set also in the list of available rights. The list could have a checkbox
next to each sec group, and a dropdown containing the userID / groupID depending on what
type of scope is defined for that group. This however makes the size of the page extremely
large since the dropdowns might in the worst case contain all the users / groups in the
entire system, and there is one of those for each sec group.

This tool is used to give specific rights to specific people. To easily give similar rights to a 
large group of people the group rights should be used instead.

=item B<Modify group rights>

Note that the groups here are not those groups that for example have their own group tools etc.
We are talking here about user groups (a group of users sharing similar properties -- a mass of
people that we want to treate easily as a single entity). The modifying of user group rights
is done similarily to the modifying of single user's rights. The only difference is that instead
of a user list a list of the available user groups is displayed instead. And when displaying
the available rights ("right groups") only those rights are displayed that have target_scope == group.

=item B<Modify world rights>

World rights are rights that everybody have. The admin can define that everybody has right to
view the forums of group 3. The modifying of the rights is done just like modifying user 
rights, but there's no list of users / groups, and only those rights are selectable that have
target_scope == world.

=back

=head2 IMPLEMENTATION OF SECURITY LEVEL CHECKING IN HANDLERS

When checking if the user has rights to do something, we first check the cache table. If we can't
find the information from cache, we'll check the other security table. First we check if the user
has personal right to do that. If not, we then check if the user belongs to a user group that
has the right to do it. If not, we finally check if everybody has right to do it. If not, the
access to that particular functionality is denied for that user. The result is saved to the cache
table.

Of course this all is done behind the scenes by a security module that is used by the handlers.
The handler programmer could for example access the security information with code like

  $oi_module_name = 'dicole_security';
  $unique_id = 'modify_rights';
  $target_type = 'G';
  $target_id = 5;
  $is_authorized = $sec->user_can($oi_module_name, $unique_id, $target_type, $target_id);

This would check if the user has right to modify rights in group 5. The method should return
0 if the user access is denied, 1 if access is authorized and null if the access hasn't been
accessed or denied. This way the handler programmer can do something special if the access hasn't
been accessed nor denied by checking if the returned value is null. But the method can be also 
used easily in statements like

  do_something() if( $sec->user_can($oi_module_name, $unique_id, $target_type, $target_id) );



=head1 NOTES AND STATUS


=head1 AUTHORS

Hannes Muurinen, E<lt>hmuurine@ionstream.fiE<gt>
