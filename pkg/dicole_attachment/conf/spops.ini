# This OpenInteract2 file was generated
#   by:    /usr/local/bin/oi2_manage create_package --package=dicole_attachment
#   on:    Thu May 22 01:53:17 2008
#   from:  spops.ini
#   using: OpenInteract2 version 1.99_07

# spops.ini: define an object to be used by your package

# Define the name by which OI2 uses to lookup this object class
#[dicole_attachment]

# Class to be generated for object.
#class           = OpenInteract2::DicoleAttachment

# Add parent classes for generated object
#isa             = 

# field - List of fields/properties of this object. If this is a
# DBI-based object and you specify 'yes' for 'field_discover' below,
# you can leave this blank

#field           = id
#field           = name
#field           = type

# Discover object fields at startup. (Recommended.)
#field_discover  = yes

# Name of primary key field
#id_field        = dicole_attachment_id

# If we should use auto-increment/sequence for IDs
#increment_field = yes

# Name of sequence to use (Oracle, Postgres)
#sequence_name   = dicole_attachment_seq

# If set to 'yes' the object will be protected by security
#is_secure       = yes

# Fields for which we do not insert values. If you're using an
# auto-increment/sequence your ID field should be here.
#no_insert       = dicole_attachment_id

# Fields for which we should never update values.
#no_update       = dicole_attachment_id

# Values will not be inserted/updated if field is undefined.
#skip_undef      =

# Fields that have SQL defaults in the database
#sql_defaults    =

# Name of the table data are stored in. 
#base_table      = dicole_attachment

# Additional names by which you can lookup this object class
#alias           = 

# Field/method name used to generically generate an object's title
#name            =

# Name of this class of objects (e.g., 'News')
#object_name     = DicoleAttachment

# Set to 'yes' for automatic full-text indexing.
#is_searchable = no

# If searchable, list all fields to be indexed
#fulltext_field = 


# Define a containing relationship. Key is class of object, value is
# the ID field in your object. So if your object contains a user ID
# field in 'user_id', you'd use 'OpenInteract2::User = user_id'; see
# SPOPS::Manual::Relationships' for details.

#[dicole_attachment has_a]
#OpenInteract2::Theme = theme_id

# Define a relationship between objects from this class and any number
# of other objects

#[dicole_attachment links_to]
#OpenInteract2::Foo = foo_dicole_attachment_link

# Security to apply to newly created objects from this class.
#[dicole_attachment creation_security]
#user  = WRITE
#group = site_admin_group:WRITE
#world = READ

# Specify actions to log
#[dicole_attachment track]
#create = no
#update = yes
#remove = yes

# Every object can report its URL; using ACTION and TASK properly
# localizes the generated URL to your deployment context
#[dicole_attachment display]
#ACTION = dicole_attachment
#TASK   = display



[attachment]
class           = OpenInteract2::Attachment
field_discover  = yes
id_field        = attachment_id
increment_field = yes
is_secure       = no
no_insert       = attachment_id
no_update       = attachment_id
base_table      = dicole_attachment

[draft_container]
class           = OpenInteract2::DraftContainer
field_discover  = yes
id_field        = container_id
increment_field = yes
is_secure       = no
no_insert       = container_id
no_update       = container_id
base_table      = dicole_draft_container
